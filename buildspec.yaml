version: 0.2

env:
  secrets-manager:
    DOCKER_TOKEN: "tokens:dockerToken"
    DOCKER_ECR: "core:dockerEcr"
    DOCKER_USER: "core:dockerUser"
    REPO: "scheduler:repository"
    TASK_DEFINITION_ARN: "scheduler:TASK_DEFINITION_ARN"
    EXECUTION_ROLE_ARN: "scheduler:EXECUTION_ROLE_ARN"
    TASK_DEFINITION_NAME: "scheduler:TASK_DEFINITION_NAME"
    DATABASE_URL: "scheduler:DATABASE_URL"
    NEXT_PUBLIC_WEBAPP_URL: "scheduler:NEXT_PUBLIC_WEBAPP_URL"
    NEXT_PUBLIC_WEBSITE_URL: "scheduler:NEXT_PUBLIC_WEBSITE_URL"
    NEXT_PUBLIC_CONSOLE_URL: "scheduler:NEXT_PUBLIC_CONSOLE_URL"
    NEXT_PUBLIC_EMBED_LIB_URL: "scheduler:NEXT_PUBLIC_EMBED_LIB_URL"
    CRON_API_KEY: "scheduler:CRON_API_KEY"
    CALENDSO_ENCRYPTION_KEY: "scheduler:CALENDSO_ENCRYPTION_KEY"
    SENDGRID_API_KEY: "scheduler:SENDGRID_API_KEY"
    SENDGRID_EMAIL: "scheduler:SENDGRID_EMAIL"
    NEXT_PUBLIC_SENDGRID_SENDER_NAME: "scheduler:NEXT_PUBLIC_SENDGRID_SENDER_NAME"
    TWILIO_SID: "scheduler:TWILIO_SID"
    TWILIO_TOKEN: "scheduler:TWILIO_TOKEN"
    TWILIO_MESSAGING_SID: "scheduler:TWILIO_MESSAGING_SID"
    TWILIO_PHONE_NUMBER: "scheduler:TWILIO_PHONE_NUMBER"
    NEXT_PUBLIC_SENDER_ID: "scheduler:NEXT_PUBLIC_SENDER_ID"
    TWILIO_VERIFY_SID: "scheduler:TWILIO_VERIFY_SID"
    EMAIL_FROM: "scheduler:EMAIL_FROM"
    EMAIL_SERVER_HOST: "scheduler:EMAIL_SERVER_HOST"
    EMAIL_SERVER_USER: "scheduler:EMAIL_SERVER_USER"
    EMAIL_SERVER_PASSWORD: "scheduler:EMAIL_SERVER_PASSWORD"
    NEXT_PUBLIC_APP_NAME: "scheduler:NEXT_PUBLIC_APP_NAME"
    NEXT_PUBLIC_SUPPORT_MAIL_ADDRESS: "scheduler:NEXT_PUBLIC_SUPPORT_MAIL_ADDRESS"
    NEXT_PUBLIC_COMPANY_NAME: "scheduler:NEXT_PUBLIC_COMPANY_NAME"
    GOOGLE_API_CREDENTIALS: "scheduler:GOOGLE_API_CREDENTIALS"
phases:
  pre_build:
    on-failure: ABORT
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_ECR
      - REPOSITORY_URI=$REPO
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    on-failure: CONTINUE
    commands:
      - echo Build started on `date`
      - echo Logging into Docker...
      - echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - echo Pulling docker node:18.15.0-bullseye-slim image...
      - docker pull node:18.15.0-bullseye-slim
      - echo Copying required files
      - cp .env.example .env      
      - printenv > .env     
      - ls -lh
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .   
      - cat .env
      - ls -lha
      - cat yarn
      - echo Docker respository URI is $REPOSITORY_URI
      - echo Docker image tag URI is $IMAGE_TAG
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    on-failure: ABORT
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s"}' $REPOSITORY_URI:$IMAGE_TAG > imageDetail.json
artifacts:
  files:
    - "image*.json"
    - "appspec.yaml"
    - "taskdef.json"
  secondary-artifacts:
    DefinitionArtifact:
      files:
        - appspec.yaml
        - taskdef.json
    ImageArtifact:
      files:
        - imageDetail.json